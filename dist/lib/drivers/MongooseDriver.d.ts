import { IAutoload } from 'najs-binding';
import { Eloquent } from '../model/Eloquent';
import { EloquentMetadata } from '../model/EloquentMetadata';
import { IEloquentDriver } from './interfaces/IEloquentDriver';
import { Document, Model } from 'mongoose';
import { MongooseQueryBuilder } from '../query-builders/mongodb/MongooseQueryBuilder';
export declare class MongooseDriver<T extends Object = {}> implements IAutoload, IEloquentDriver {
    attributes: Document & T;
    metadata: EloquentMetadata;
    eloquentModel: Eloquent<T>;
    mongooseModel: Model<Document & T>;
    queryLogGroup: string;
    modelName: string;
    isGuarded: boolean;
    constructor(model: Eloquent<T>, isGuarded: boolean);
    getClassName(): string;
    initialize(data?: T): void;
    protected initializeModelIfNeeded(): void;
    getRecord(): T;
    getAttribute(name: string): any;
    setAttribute(name: string, value: any): boolean;
    getId(): any;
    setId(id: any): void;
    newQuery(): MongooseQueryBuilder<T>;
    toObject(): Object;
    toJSON(): Object;
    is(model: any): boolean;
    formatAttributeName(name: string): string;
    getReservedNames(): string[];
    getDriverProxyMethods(): string[];
    getQueryProxyMethods(): string[];
    touch(): void;
    save(): Promise<any>;
    delete(): Promise<any>;
    forceDelete(): Promise<any>;
    restore(): Promise<any>;
    fresh(): Promise<T | null>;
}
