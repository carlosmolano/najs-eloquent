import { EloquentBase, EloquentSoftDelete } from './EloquentBase';
import { OrderDirection, SubCondition } from '../interfaces/IBasicQueryGrammar';
import { IMongooseProvider } from '../interfaces/IMongooseProvider';
import { MongooseQueryBuilder } from '../query-builders/MongooseQueryBuilder';
import { Document, Schema, Model } from 'mongoose';
import { Collection } from 'collect.js';
export declare abstract class EloquentMongoose<T> extends EloquentBase<Document & T> {
    protected collection: string;
    protected schema: Schema;
    protected model: Model<Document & T>;
    abstract getSchema(): Schema;
    getId(): any;
    setId(value: any): any;
    static Class(): any;
    getModelName(): string;
    protected initializeModelIfNeeded(softDeletes: boolean | EloquentSoftDelete): void;
    protected initialize(data: Document & T | Object | undefined): EloquentMongoose<T>;
    protected getMongooseProvider(): IMongooseProvider;
    protected isNativeRecord(data: Document & T | Object | undefined): boolean;
    protected initializeAttributes(): void;
    protected setAttributesByObject(data: Object): void;
    protected setAttributesByNativeRecord(nativeRecord: Document & T): void;
    protected getReservedPropertiesList(): string[];
    getAttribute(name: string): any;
    setAttribute(name: string, value: any): boolean;
    newQuery(softDeletes?: boolean | EloquentSoftDelete): any;
    protected getQueryLogGroup(): string;
    newInstance(document?: Document & T | Object): EloquentMongoose<T>;
    newCollection(dataset: Array<Document & T>): Collection<EloquentMongoose<T>>;
    toObject(): Object;
    toJson(): Object;
    is(document: this): boolean;
    fireEvent(event: string): this;
    touch(): void;
    save(): Promise<any>;
    delete(): Promise<any>;
    forceDelete(): Promise<any>;
    restore(): Promise<any>;
    fresh(): Promise<this | undefined | null>;
    queryName(name: string): MongooseQueryBuilder;
    static queryName(name: string): MongooseQueryBuilder;
    select(field: string): MongooseQueryBuilder;
    select(fields: string[]): MongooseQueryBuilder;
    select(...fields: Array<string | string[]>): MongooseQueryBuilder;
    static select(field: string): MongooseQueryBuilder;
    static select(fields: string[]): MongooseQueryBuilder;
    static select(...fields: Array<string | string[]>): MongooseQueryBuilder;
    distinct(field: string): MongooseQueryBuilder;
    distinct(fields: string[]): MongooseQueryBuilder;
    distinct(...fields: Array<string | string[]>): MongooseQueryBuilder;
    static distinct(field: string): MongooseQueryBuilder;
    static distinct(fields: string[]): MongooseQueryBuilder;
    static distinct(...fields: Array<string | string[]>): MongooseQueryBuilder;
    orderBy(field: string): MongooseQueryBuilder;
    orderBy(field: string, direction: OrderDirection): MongooseQueryBuilder;
    static orderBy(field: string): MongooseQueryBuilder;
    static orderBy(field: string, direction: OrderDirection): MongooseQueryBuilder;
    orderByAsc(field: string): MongooseQueryBuilder;
    static orderByAsc(field: string): MongooseQueryBuilder;
    orderByDesc(field: string): MongooseQueryBuilder;
    static orderByDesc(field: string): MongooseQueryBuilder;
    limit(records: number): MongooseQueryBuilder;
    static limit(records: number): MongooseQueryBuilder;
    where(conditionBuilder: SubCondition): MongooseQueryBuilder;
    where(field: string, value: any): MongooseQueryBuilder;
    where(field: string, operator: Operator, value: any): MongooseQueryBuilder;
    static where(conditionBuilder: SubCondition): MongooseQueryBuilder;
    static where(field: string, value: any): MongooseQueryBuilder;
    static where(field: string, operator: Operator, value: any): MongooseQueryBuilder;
    orWhere(conditionBuilder: SubCondition): MongooseQueryBuilder;
    orWhere(field: string, value: any): MongooseQueryBuilder;
    orWhere(field: string, operator: Operator, value: any): MongooseQueryBuilder;
    static orWhere(conditionBuilder: SubCondition): MongooseQueryBuilder;
    static orWhere(field: string, value: any): MongooseQueryBuilder;
    static orWhere(field: string, operator: Operator, value: any): MongooseQueryBuilder;
    whereIn(field: string, values: Array<any>): MongooseQueryBuilder;
    static whereIn(field: string, values: Array<any>): MongooseQueryBuilder;
    whereNotIn(field: string, values: Array<any>): MongooseQueryBuilder;
    static whereNotIn(field: string, values: Array<any>): MongooseQueryBuilder;
    orWhereIn(field: string, values: Array<any>): MongooseQueryBuilder;
    static orWhereIn(field: string, values: Array<any>): MongooseQueryBuilder;
    orWhereNotIn(field: string, values: Array<any>): MongooseQueryBuilder;
    static orWhereNotIn(field: string, values: Array<any>): MongooseQueryBuilder;
    whereNull(field: string): any;
    static whereNull(field: string): any;
    whereNotNull(field: string): any;
    static whereNotNull(field: string): any;
    orWhereNull(field: string): any;
    static orWhereNull(field: string): any;
    orWhereNotNull(field: string): any;
    static orWhereNotNull(field: string): any;
    withTrashed(): any;
    static withTrashed(): any;
    onlyTrashed(): any;
    static onlyTrashed(): any;
    all(): Promise<any>;
    static all(): Promise<any>;
    get(): Promise<any>;
    get(field: string): Promise<any>;
    get(fields: string[]): Promise<any>;
    get(...fields: Array<string | string[]>): Promise<any>;
    static get(): Promise<any>;
    static get(field: string): Promise<any>;
    static get(fields: string[]): Promise<any>;
    static get(...fields: Array<string | string[]>): Promise<any>;
    find(): Promise<any>;
    find(id: any): Promise<any>;
    static find(id: any): Promise<any>;
    first(): Promise<any>;
    static first(): Promise<any>;
    pluck(value: string): Promise<Object>;
    pluck(value: string, key: string): Promise<Object>;
    static pluck(value: string): Promise<Object>;
    static pluck(value: string, key: string): Promise<Object>;
    count(): Promise<number>;
    static count(): Promise<number>;
    native(handler: (native: any) => any): Promise<any>;
    static native(handler: (native: any) => any): Promise<any>;
    findById(id: any): Promise<any>;
    static findById(id: any): Promise<any>;
    findOrFail(id: any): Promise<any>;
    static findOrFail(id: any): Promise<any>;
}
